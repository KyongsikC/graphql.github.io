{
    "componentChunkName": "component---src-templates-doc-tsx",
    "path": "/learn/pagination/",
    "result": {"data":{"doc":{"frontmatter":{"title":"Pagination","heroText":null,"date":null,"permalink":"/learn/pagination/","byline":null,"guestBio":null,"sublinks":null,"layout":"docs","tags":null},"id":"1e6ffc19-7088-59a2-9d74-ad0f09483578","rawMarkdownBody":"\n## Plurals\n\n가장 간단한 방법은 복수형을 반환하는 필드를 사용하는 것\n\n```graphql\n# { \"graphiql\": true }\n{\n  hero {\n    name\n    friends {\n      name\n    }\n  }\n}\n```\n\n## Slicing\n\n가져올 친구 수를 지정\n\n```graphql\n{\n  hero {\n    name\n    friends(first: 2) {\n      name\n    }\n  }\n}\n```\n\n## Pagination and Edges\n\n페이지 매김을 할 수 있는 방법\n\n- `friends(first:2 offset:2)` 목록에서 다음 두 개를 요청\n- `friends(first:2 after:$friendId)`, 가져온 마지막 친구 다음에 다음 두 개를 요청\n- `friends(first:2 after:$friendCursor)`, 마지막 항목에서 커서를 가져와 페이지 매김에 사용(**cursor-based pagination**)\n\n```graphql\n{\n  hero {\n    name\n    friends(first: 2) {\n      edges {\n        node {\n          name\n        }\n        cursor\n      }\n    }\n  }\n}\n```\n\n## End-of-list, counts, and Connections\n\n연결 끝에 도달했을 때를 어떻게 알 수 있습니까?\n\n```graphql\n{\n  hero {\n    name\n    friends(first: 2) {\n      totalCount\n      edges {\n        node {\n          name\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n}\n```\n\n이 PageInfo 개체에 endCursor 및 startCursor도 포함할 수 있습니다. 이는 연결에 대한 잠재적인 사용성 개선으로 이어집니다.\n\n## Complete Connection Model\n\n분명히 이것은 복수형을 갖는 원래 디자인보다 더 복잡합니다! 그러나 이 디자인을 채택하여 클라이언트를 위한 여러 기능을 풀 수 있습니다.\n\n- 목록을 페이지 매김하는 기능.\n- `totalCount` 또는 `pageInfo`와 같은 연결 자체에 대한 정보를 요청할 수 있는 기능.\n- `cursor` 또는 `friendshipTime`과 같은 에지 자체에 대한 정보를 요청할 수 있는 기능.\n- 사용자가 opaque cursors를 사용하기 때문에 백엔드에서 페이지 매김을 수행하는 방법을 변경할 수 있습니다.\n\n```graphql\n# { \"graphiql\": true }\n{\n  hero {\n    name\n    friendsConnection(first: 2, after: \"Y3Vyc29yMQ==\") {\n      totalCount\n      edges {\n        node {\n          name\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n}\n```\n\n## Connection Specification\n\n이 패턴의 일관된 구현을 보장하기 위해 Relay 프로젝트에는 커서 기반 연결 패턴을 사용하는 GraphQL API를 빌드하기 위해 따를 수 있는 공식 [specification](https://facebook.github.io/relay/graphql/connections.htm)이 있습니다.\n"},"nextDoc":{"frontmatter":{"title":"","permalink":null}}},"pageContext":{"permalink":"/learn/pagination/","nextPermalink":null,"sideBarData":[{"name":"Learn","links":[{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/learn/Introduction.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"Introduction to GraphQL","permalink":"/learn/","next":"/learn/queries/","category":"Learn","sublinks":null,"sidebarTitle":"Introduction","date":null,"tags":null},"id":"26b5d162-6d81-5127-b220-ac8d4ba7b50b"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/learn/Learn-Queries.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"Queries and Mutations","permalink":"/learn/queries/","next":"/learn/schema/","category":"Learn","sublinks":"Fields,Arguments,Aliases,Fragments,Operation Name,Variables,Directives,Mutations,Inline Fragments","sidebarTitle":null,"date":null,"tags":null},"id":"2eb9e956-93df-5ac2-a377-5053865245d8"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/learn/Learn-Schema.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"Schemas and Types","permalink":"/learn/schema/","next":"/learn/validation/","category":"Learn","sublinks":"Type System,Type Language,Object Types and Fields,Arguments,The Query and Mutation Types,Scalar Types,Enumeration Types,Lists and Non-Null,Interfaces,Union Types,Input Types","sidebarTitle":null,"date":null,"tags":null},"id":"2a3f85f6-2e2b-52be-8cea-ed6d4d9c5ca8"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/learn/Learn-Validation.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"Validation","permalink":"/learn/validation/","next":"/learn/execution/","category":"Learn","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"d3cc6cbf-db61-5cf4-8cd9-53d2efc118ad"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/learn/Learn-Execution.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"Execution","permalink":"/learn/execution/","next":"/learn/thinking-in-graphs/","category":"Learn","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"3304be94-c7e2-5202-9dac-3d26f1bf7d54"}]},{"name":"Best Practices","links":[{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/learn/BestPractice-ThinkingInGraphs.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"Thinking in Graphs","permalink":"/learn/thinking-in-graphs/","next":"/learn/serving-over-http/","category":"Best Practices","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"3dd681cd-ee1c-5881-a8c3-74382dc90a52"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/learn/BestPractice-ServingOverHTTP.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"Serving over HTTP","permalink":"/learn/serving-over-http/","next":"/learn/authorization/","category":"Best Practices","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"a95a9670-790f-54d4-9902-b04335bd85d2"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/learn/BestPractice-Authorization.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"Authorization","permalink":"/learn/authorization/","next":"/learn/pagination/","category":"Best Practices","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"44257d7e-1f51-598b-b60f-33b95abcff71"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/learn/BestPractice-Pagination.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"Pagination","permalink":"/learn/pagination/","next":null,"category":"Best Practices","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"1e6ffc19-7088-59a2-9d74-ad0f09483578"}]}],"sourcePath":"src/content/learn/BestPractice-Pagination.md"}},
    "staticQueryHashes": ["1581580458","2616045547"]}