{
    "componentChunkName": "component---src-templates-doc-tsx",
    "path": "/graphql-js/passing-arguments/",
    "result": {"data":{"doc":{"frontmatter":{"title":"Passing Arguments","heroText":null,"date":null,"permalink":"/graphql-js/passing-arguments/","byline":null,"guestBio":null,"sublinks":null,"layout":"docs","tags":null},"id":"bc1b699a-83c5-5ae9-8032-4ae2950f897c","rawMarkdownBody":"\nJust like a REST API, it's common to pass arguments to an endpoint in a GraphQL API. By defining the arguments in the schema language, typechecking happens automatically. Each argument must be named and have a type. For example, in the [Basic Types documentation](/graphql-js/basic-types/) we had an endpoint called `rollThreeDice`:\n\n```javascript\ntype Query {\n  rollThreeDice: [Int]\n}\n```\n\nInstead of hardcoding “three”, we might want a more general function that rolls `numDice` dice, each of which have `numSides` sides. We can add arguments to the GraphQL schema language like this:\n\n```javascript\ntype Query {\n  rollDice(numDice: Int!, numSides: Int): [Int]\n}\n```\n\nThe exclamation point in `Int!` indicates that `numDice` can't be null, which means we can skip a bit of validation logic to make our server code simpler. We can let `numSides` be null and assume that by default a die has 6 sides.\n\nSo far, our resolver functions took no arguments. When a resolver takes arguments, they are passed as one “args” object, as the first argument to the function. So rollDice could be implemented as:\n\n```javascript\nvar root = {\n  rollDice: (args) => {\n    var output = [];\n    for (var i = 0; i < args.numDice; i++) {\n      output.push(1 + Math.floor(Math.random() * (args.numSides || 6)));\n    }\n    return output;\n  }\n};\n```\n\nIt's convenient to use [ES6 destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) for these parameters, since you know what format they will be. So we can also write `rollDice` as\n\n```javascript\nvar root = {\n  rollDice: ({numDice, numSides}) => {\n    var output = [];\n    for (var i = 0; i < numDice; i++) {\n      output.push(1 + Math.floor(Math.random() * (numSides || 6)));\n    }\n    return output;\n  }\n};\n```\n\nIf you're familiar with destructuring, this is a bit nicer because the line of code where `rollDice` is defined tells you about what the arguments are.\n\nThe entire code for a server that hosts this `rollDice` API is:\n\n```javascript\nvar express = require('express');\nvar { graphqlHTTP } = require('express-graphql');\nvar { buildSchema } = require('graphql');\n\n// Construct a schema, using GraphQL schema language\nvar schema = buildSchema(`\n  type Query {\n    rollDice(numDice: Int!, numSides: Int): [Int]\n  }\n`);\n\n// The root provides a resolver function for each API endpoint\nvar root = {\n  rollDice: ({numDice, numSides}) => {\n    var output = [];\n    for (var i = 0; i < numDice; i++) {\n      output.push(1 + Math.floor(Math.random() * (numSides || 6)));\n    }\n    return output;\n  }\n};\n\nvar app = express();\napp.use('/graphql', graphqlHTTP({\n  schema: schema,\n  rootValue: root,\n  graphiql: true,\n}));\napp.listen(4000);\nconsole.log('Running a GraphQL API server at localhost:4000/graphql');\n```\n\nWhen you call this API, you have to pass each argument by name. So for the server above, you could issue this GraphQL query to roll three six-sided dice:\n\n```javascript\n{\n  rollDice(numDice: 3, numSides: 6)\n}\n```\n\nIf you run this code with `node server.js` and browse to http://localhost:4000/graphql you can try out this API.\n\nWhen you're passing arguments in code, it's generally better to avoid constructing the whole query string yourself. Instead, you can use `$` syntax to define variables in your query, and pass the variables as a separate map.\n\nFor example, some JavaScript code that calls our server above is:\n\n```javascript\nvar dice = 3;\nvar sides = 6;\nvar query = `query RollDice($dice: Int!, $sides: Int) {\n  rollDice(numDice: $dice, numSides: $sides)\n}`;\n\nfetch('/graphql', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  body: JSON.stringify({\n    query,\n    variables: { dice, sides },\n  })\n})\n  .then(r => r.json())\n  .then(data => console.log('data returned:', data));\n```\n\nUsing `$dice` and `$sides` as variables in GraphQL means we don't have to worry about escaping on the client side.\n\nWith basic types and argument passing, you can implement anything you can implement in a REST API. But GraphQL supports even more powerful queries. You can replace multiple API calls with a single API call if you learn how to [define your own object types](/graphql-js/object-types/).\n"},"nextDoc":{"frontmatter":{"title":"Object Types","permalink":"/graphql-js/object-types/"}}},"pageContext":{"permalink":"/graphql-js/passing-arguments/","nextPermalink":"/graphql-js/object-types/","sideBarData":[{"name":"GraphQL.js Tutorial","links":[{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-GettingStarted.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Getting Started With GraphQL.js","permalink":"/graphql-js/","next":"/graphql-js/running-an-express-graphql-server/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":"Getting Started","date":null,"tags":null},"id":"5438d58b-982e-5844-b28e-cb66d8c4e993"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Running an Express GraphQL Server","permalink":"/graphql-js/running-an-express-graphql-server/","next":"/graphql-js/graphql-clients/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":"Running Express + GraphQL","date":null,"tags":null},"id":"ed62cf84-8dcb-5a92-b5f9-4328c2bf4cac"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-GraphQLClients.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL Clients","permalink":"/graphql-js/graphql-clients/","next":"/graphql-js/basic-types/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"25adb02f-44bb-563e-b82e-c9ac0b47b140"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-BasicTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Basic Types","permalink":"/graphql-js/basic-types/","next":"/graphql-js/passing-arguments/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"067d30a9-2895-584b-82d4-2f461f333b6a"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-PassingArguments.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Passing Arguments","permalink":"/graphql-js/passing-arguments/","next":"/graphql-js/object-types/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"bc1b699a-83c5-5ae9-8032-4ae2950f897c"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-ObjectTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Object Types","permalink":"/graphql-js/object-types/","next":"/graphql-js/mutations-and-input-types/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"748468bd-5832-55ea-8585-c2156a85819f"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-Mutations.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Mutations and Input Types","permalink":"/graphql-js/mutations-and-input-types/","next":"/graphql-js/authentication-and-express-middleware/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"bd407c7c-cfed-5fed-899c-4e581ac840bb"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-Authentication.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Authentication and Express Middleware","permalink":"/graphql-js/authentication-and-express-middleware/","next":"/graphql-js/constructing-types/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":"Authentication & Middleware","date":null,"tags":null},"id":"4c0ab815-0aa1-52d6-8fbd-c9490526b321"}]},{"name":"Advanced Guides","links":[{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Guides-ConstructingTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Constructing Types","permalink":"/graphql-js/constructing-types/","next":"/graphql-js/express-graphql/","category":"Advanced Guides","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"e77e08e7-36e7-57cf-a824-2d1422915c37"}]},{"name":"API Reference","links":[{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"express-graphql","permalink":"/graphql-js/express-graphql/","next":"/graphql-js/graphql/","category":"API Reference","sublinks":"graphqlHTTP","sidebarTitle":null,"date":null,"tags":null},"id":"e0090c94-f27a-5d28-835c-4648cde911aa"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-GraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql","permalink":"/graphql-js/graphql/","next":"/graphql-js/error/","category":"API Reference","sublinks":"graphql","sidebarTitle":null,"date":null,"tags":null},"id":"58f2f91f-cca8-57fd-8db4-4680736c410e"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-Errors.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/error","permalink":"/graphql-js/error/","next":"/graphql-js/execution/","category":"API Reference","sublinks":"formatError,GraphQLError,locatedError,syntaxError","sidebarTitle":null,"date":null,"tags":null},"id":"9619fb38-c60a-57c5-ad41-a654af6b7ec5"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-Execution.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/execution","permalink":"/graphql-js/execution/","next":"/graphql-js/language/","category":"API Reference","sublinks":"execute","sidebarTitle":null,"date":null,"tags":null},"id":"f17b64f6-62ac-5827-ad1b-f44e29175eb0"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-Language.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/language","permalink":"/graphql-js/language/","next":"/graphql-js/type/","category":"API Reference","sublinks":"BREAK,getLocation,Kind,lex,parse,parseValue,printSource,visit","sidebarTitle":null,"date":null,"tags":null},"id":"415b55e0-0096-5624-b79a-b422b4d7ad07"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-TypeSystem.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/type","permalink":"/graphql-js/type/","next":"/graphql-js/utilities/","category":"API Reference","sublinks":"getNamedType,getNullableType,GraphQLBoolean,GraphQLEnumType,GraphQLFloat,GraphQLID,GraphQLInputObjectType,GraphQLInt,GraphQLInterfaceType,GraphQLList,GraphQLNonNull,GraphQLObjectType,GraphQLScalarType,GraphQLSchema,GraphQLString,GraphQLUnionType,isAbstractType,isCompositeType,isInputType,isLeafType,isOutputType","sidebarTitle":null,"date":null,"tags":null},"id":"f84564ec-97de-5575-82bf-a463dda7aaeb"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-Utilities.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/utilities","permalink":"/graphql-js/utilities/","next":"/graphql-js/validation/","category":"API Reference","sublinks":"astFromValue,buildASTSchema,buildClientSchema,buildSchema,introspectionQuery,isValidJSValue,isValidLiteralValue,printIntrospectionSchema,printSchema,typeFromAST,TypeInfo","sidebarTitle":null,"date":null,"tags":null},"id":"fa055e3a-e2f6-573b-b853-aeb3d2523b43"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-Validation.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/validation","permalink":"/graphql-js/validation/","next":null,"category":"API Reference","sublinks":"specifiedRules,validate","sidebarTitle":null,"date":null,"tags":null},"id":"dd7fe377-a8d5-53b9-bd80-e605981d32f0"}]}],"sourcePath":"src/content/graphql-js/Tutorial-PassingArguments.md"}},
    "staticQueryHashes": ["1581580458","2616045547"]}