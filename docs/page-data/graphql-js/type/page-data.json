{
    "componentChunkName": "component---src-templates-doc-tsx",
    "path": "/graphql-js/type/",
    "result": {"data":{"doc":{"frontmatter":{"title":"graphql/type","heroText":null,"date":null,"permalink":"/graphql-js/type/","byline":null,"guestBio":null,"sublinks":"getNamedType,getNullableType,GraphQLBoolean,GraphQLEnumType,GraphQLFloat,GraphQLID,GraphQLInputObjectType,GraphQLInt,GraphQLInterfaceType,GraphQLList,GraphQLNonNull,GraphQLObjectType,GraphQLScalarType,GraphQLSchema,GraphQLString,GraphQLUnionType,isAbstractType,isCompositeType,isInputType,isLeafType,isOutputType","layout":"docs","tags":null},"id":"f84564ec-97de-5575-82bf-a463dda7aaeb","rawMarkdownBody":"\nThe `graphql/type` module is responsible for defining GraphQL types and schema. You can import either from the `graphql/type` module, or from the root `graphql` module. For example:\n\n```js\nimport { GraphQLSchema } from 'graphql'; // ES6\nvar { GraphQLSchema } = require('graphql'); // CommonJS\n```\n\n## Overview\n\n*Schema*\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#graphqlschema\">\n      <pre>class GraphQLSchema</pre>\n      A representation of the capabilities of a GraphQL Server.\n    </a>\n  </li>\n</ul>\n\n*Definitions*\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#graphqlscalartype\">\n      <pre>class GraphQLScalarType</pre>\n      A scalar type within GraphQL.\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlobjecttype\">\n      <pre>class GraphQLObjectType</pre>\n      An object type within GraphQL that contains fields.\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlinterfacetype\">\n      <pre>class GraphQLInterfaceType</pre>\n      An interface type within GraphQL that defines fields implementations will contain.\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqluniontype\">\n      <pre>class GraphQLUnionType</pre>\n      A union type within GraphQL that defines a list of implementations.\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlenumtype\">\n      <pre>class GraphQLEnumType</pre>\n      An enum type within GraphQL that defines a list of valid values.\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlinputobjecttype\">\n      <pre>class GraphQLInputObjectType</pre>\n      An input object type within GraphQL that represents structured inputs.\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqllist\">\n      <pre>class GraphQLList</pre>\n      A type wrapper around other types that represents a list of those types.\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlnonnull\">\n      <pre>class GraphQLNonNull</pre>\n      A type wrapper around other types that represents a non-null version of those types.\n    </a>\n  </li>\n</ul>\n\n*Predicates*\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#isinputtype\">\n      <pre>function isInputType</pre>\n      Returns if a type can be used as input types for arguments and directives.\n    </a>\n  </li>\n  <li>\n    <a href=\"#isoutputtype\">\n      <pre>function isOutputType</pre>\n      Returns if a type can be used as output types as the result of fields.\n  </li>\n  <li>\n    <a href=\"#isleaftype\">\n      <pre>function isLeafType</pre>\n      Returns if a type can be a leaf value in a response.\n    </a>\n  </li>\n  <li>\n    <a href=\"#iscompositetype\">\n      <pre>function isCompositeType</pre>\n      Returns if a type can be the parent context of a selection set.\n    </a>\n  </li>\n  <li>\n    <a href=\"#isabstracttype\">\n      <pre>function isAbstractType</pre>\n      Returns if a type is a combination of object types.\n    </a>\n  </li>\n</ul>\n\n*Un-modifiers*\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#getnullabletype\">\n      <pre>function getNullableType</pre>\n      Strips any non-null wrappers from a type.\n    </a>\n  </li>\n  <li>\n    <a href=\"#getnamedtype\">\n      <pre>function getNamedType</pre>\n      Strips any non-null or list wrappers from a type.\n    </a>\n  </li>\n</ul>\n\n*Scalars*\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#graphqlint\">\n      <pre>var GraphQLInt</pre>\n      A scalar type representing integers.\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlfloat\">\n      <pre>var GraphQLFloat</pre>\n      A scalar type representing floats.\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlstring\">\n      <pre>var GraphQLString</pre>\n      A scalar type representing strings.\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlboolean\">\n      <pre>var GraphQLBoolean</pre>\n      A scalar type representing booleans.\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlid\">\n      <pre>var GraphQLID</pre>\n      A scalar type representing IDs.\n    </a>\n  </li>\n</ul>\n\n## Schema\n\n### GraphQLSchema\n\n```js\nclass GraphQLSchema {\n  constructor(config: GraphQLSchemaConfig)\n}\n\ntype GraphQLSchemaConfig = {\n  query: GraphQLObjectType;\n  mutation?: ?GraphQLObjectType;\n}\n```\n\nA Schema is created by supplying the root types of each type of operation,\nquery and mutation (optional). A schema definition is then supplied to the\nvalidator and executor.\n\n#### Example\n\n```js\nvar MyAppSchema = new GraphQLSchema({\n  query: MyAppQueryRootType\n  mutation: MyAppMutationRootType\n});\n```\n\n## Definitions\n\n### GraphQLScalarType\n\n```js\nclass GraphQLScalarType<InternalType> {\n  constructor(config: GraphQLScalarTypeConfig<InternalType>)\n}\n\ntype GraphQLScalarTypeConfig<InternalType> = {\n  name: string;\n  description?: ?string;\n  serialize: (value: mixed) => ?InternalType;\n  parseValue?: (value: mixed) => ?InternalType;\n  parseLiteral?: (valueAST: Value) => ?InternalType;\n}\n```\n\nThe leaf values of any request and input values to arguments are\nScalars (or Enums) and are defined with a name and a series of serialization\nfunctions used to ensure validity.\n\n#### Example\n\n```js\nvar OddType = new GraphQLScalarType({\n  name: 'Odd',\n  serialize: oddValue,\n  parseValue: oddValue,\n  parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      return oddValue(parseInt(ast.value, 10));\n    }\n    return null;\n  }\n});\n\nfunction oddValue(value) {\n  return value % 2 === 1 ? value : null;\n}\n```\n\n### GraphQLObjectType\n\n```js\nclass GraphQLObjectType {\n  constructor(config: GraphQLObjectTypeConfig)\n}\n\ntype GraphQLObjectTypeConfig = {\n  name: string;\n  interfaces?: GraphQLInterfacesThunk | Array<GraphQLInterfaceType>;\n  fields: GraphQLFieldConfigMapThunk | GraphQLFieldConfigMap;\n  isTypeOf?: (value: any, info?: GraphQLResolveInfo) => boolean;\n  description?: ?string\n}\n\ntype GraphQLInterfacesThunk = () => Array<GraphQLInterfaceType>;\n\ntype GraphQLFieldConfigMapThunk = () => GraphQLFieldConfigMap;\n\n// See below about resolver functions.\ntype GraphQLFieldResolveFn = (\n  source?: any,\n  args?: {[argName: string]: any},\n  context?: any,\n  info?: GraphQLResolveInfo\n) => any\n\ntype GraphQLResolveInfo = {\n  fieldName: string,\n  fieldNodes: Array<Field>,\n  returnType: GraphQLOutputType,\n  parentType: GraphQLCompositeType,\n  schema: GraphQLSchema,\n  fragments: { [fragmentName: string]: FragmentDefinition },\n  rootValue: any,\n  operation: OperationDefinition,\n  variableValues: { [variableName: string]: any },\n}\n\ntype GraphQLFieldConfig = {\n  type: GraphQLOutputType;\n  args?: GraphQLFieldConfigArgumentMap;\n  resolve?: GraphQLFieldResolveFn;\n  deprecationReason?: string;\n  description?: ?string;\n}\n\ntype GraphQLFieldConfigArgumentMap = {\n  [argName: string]: GraphQLArgumentConfig;\n};\n\ntype GraphQLArgumentConfig = {\n  type: GraphQLInputType;\n  defaultValue?: any;\n  description?: ?string;\n}\n\ntype GraphQLFieldConfigMap = {\n  [fieldName: string]: GraphQLFieldConfig;\n};\n```\n\nAlmost all of the GraphQL types you define will be object types. Object types\nhave a name, but most importantly describe their fields.\n\nWhen two types need to refer to each other, or a type needs to refer to\nitself in a field, you can use a function expression (aka a closure or a\nthunk) to supply the fields lazily.\n\nNote that resolver functions are provided the `source` object as the first parameter. \nHowever, if a resolver function is not provided, then the default resolver is\nused, which looks for a method on `source` of the same name as the field. If found,\nthe method is called with `(args, context, info)`. Since it is a method on `source`,\nthat value can always be referenced with `this`.\n\n#### Examples\n\n```js\nvar AddressType = new GraphQLObjectType({\n  name: 'Address',\n  fields: {\n    street: { type: GraphQLString },\n    number: { type: GraphQLInt },\n    formatted: {\n      type: GraphQLString,\n      resolve(obj) {\n        return obj.number + ' ' + obj.street\n      }\n    }\n  }\n});\n\nvar PersonType = new GraphQLObjectType({\n  name: 'Person',\n  fields: () => ({\n    name: { type: GraphQLString },\n    bestFriend: { type: PersonType },\n  })\n});\n```\n\n### GraphQLInterfaceType\n\n```js\nclass GraphQLInterfaceType {\n  constructor(config: GraphQLInterfaceTypeConfig)\n}\n\ntype GraphQLInterfaceTypeConfig = {\n  name: string,\n  fields: GraphQLFieldConfigMapThunk | GraphQLFieldConfigMap,\n  resolveType?: (value: any, info?: GraphQLResolveInfo) => ?GraphQLObjectType,\n  description?: ?string\n};\n```\n\nWhen a field can return one of a heterogeneous set of types, a Interface type\nis used to describe what types are possible, what fields are in common across\nall types, as well as a function to determine which type is actually used\nwhen the field is resolved.\n\n#### Example\n\n```js\nvar EntityType = new GraphQLInterfaceType({\n  name: 'Entity',\n  fields: {\n    name: { type: GraphQLString }\n  }\n});\n```\n\n### GraphQLUnionType\n\n```js\nclass GraphQLUnionType {\n  constructor(config: GraphQLUnionTypeConfig)\n}\n\ntype GraphQLUnionTypeConfig = {\n  name: string,\n  types: GraphQLObjectsThunk | Array<GraphQLObjectType>,\n  resolveType?: (value: any, info?: GraphQLResolveInfo) => ?GraphQLObjectType;\n  description?: ?string;\n};\n\ntype GraphQLObjectsThunk = () => Array<GraphQLObjectType>;\n```\n\nWhen a field can return one of a heterogeneous set of types, a Union type\nis used to describe what types are possible as well as providing a function\nto determine which type is actually used when the field is resolved.\n\n### Example\n\n```js\nvar PetType = new GraphQLUnionType({\n  name: 'Pet',\n  types: [ DogType, CatType ],\n  resolveType(value) {\n    if (value instanceof Dog) {\n      return DogType;\n    }\n    if (value instanceof Cat) {\n      return CatType;\n    }\n  }\n});\n```\n\n### GraphQLEnumType\n\n```js\nclass GraphQLEnumType {\n  constructor(config: GraphQLEnumTypeConfig)\n}\n\ntype GraphQLEnumTypeConfig = {\n  name: string;\n  values: GraphQLEnumValueConfigMap;\n  description?: ?string;\n}\n\ntype GraphQLEnumValueConfigMap = {\n  [valueName: string]: GraphQLEnumValueConfig;\n};\n\ntype GraphQLEnumValueConfig = {\n  value?: any;\n  deprecationReason?: string;\n  description?: ?string;\n}\n\ntype GraphQLEnumValueDefinition = {\n  name: string;\n  value?: any;\n  deprecationReason?: string;\n  description?: ?string;\n}\n```\n\nSome leaf values of requests and input values are Enums. GraphQL serializes\nEnum values as strings, however internally Enums can be represented by any\nkind of type, often integers.\n\nNote: If a value is not provided in a definition, the name of the enum value\nwill be used as its internal value.\n\n#### Example\n\n```js\nvar RGBType = new GraphQLEnumType({\n  name: 'RGB',\n  values: {\n    RED: { value: 0 },\n    GREEN: { value: 1 },\n    BLUE: { value: 2 }\n  }\n});\n```\n\n### GraphQLInputObjectType\n\n```js\nclass GraphQLInputObjectType {\n  constructor(config: GraphQLInputObjectConfig)\n}\n\ntype GraphQLInputObjectConfig = {\n  name: string;\n  fields: GraphQLInputObjectConfigFieldMapThunk | GraphQLInputObjectConfigFieldMap;\n  description?: ?string;\n}\n\ntype GraphQLInputObjectConfigFieldMapThunk = () => GraphQLInputObjectConfigFieldMap;\n\ntype GraphQLInputObjectFieldConfig = {\n  type: GraphQLInputType;\n  defaultValue?: any;\n  description?: ?string;\n}\n\ntype GraphQLInputObjectConfigFieldMap = {\n  [fieldName: string]: GraphQLInputObjectFieldConfig;\n};\n\ntype GraphQLInputObjectField = {\n  name: string;\n  type: GraphQLInputType;\n  defaultValue?: any;\n  description?: ?string;\n}\n\ntype GraphQLInputObjectFieldMap = {\n  [fieldName: string]: GraphQLInputObjectField;\n};\n```\n\nAn input object defines a structured collection of fields which may be\nsupplied to a field argument.\n\nUsing `NonNull` will ensure that a value must be provided by the query\n\n#### Example\n\n```js\nvar GeoPoint = new GraphQLInputObjectType({\n  name: 'GeoPoint',\n  fields: {\n    lat: { type: new GraphQLNonNull(GraphQLFloat) },\n    lon: { type: new GraphQLNonNull(GraphQLFloat) },\n    alt: { type: GraphQLFloat, defaultValue: 0 },\n  }\n});\n```\n\n### GraphQLList\n\n```js\nclass GraphQLList {\n  constructor(type: GraphQLType)\n}\n```\n\nA list is a kind of type marker, a wrapping type which points to another\ntype. Lists are often created within the context of defining the fields of\nan object type.\n\n#### Example\n\n```js\nvar PersonType = new GraphQLObjectType({\n  name: 'Person',\n  fields: () => ({\n    parents: { type: new GraphQLList(PersonType) },\n    children: { type: new GraphQLList(PersonType) },\n  })\n});\n```\n\n### GraphQLNonNull\n\n```js\nclass GraphQLNonNull {\n  constructor(type: GraphQLType)\n}\n```\n\nA non-null is a kind of type marker, a wrapping type which points to another\ntype. Non-null types enforce that their values are never null and can ensure\nan error is raised if this ever occurs during a request. It is useful for\nfields which you can make a strong guarantee on non-nullability, for example\nusually the id field of a database row will never be null.\n\n#### Example\n\n```js\nvar RowType = new GraphQLObjectType({\n  name: 'Row',\n  fields: () => ({\n    id: { type: new GraphQLNonNull(String) },\n  })\n});\n```\n\n## Predicates\n\n### isInputType\n\n```js\nfunction isInputType(type: ?GraphQLType): boolean\n```\n\nThese types may be used as input types for arguments and directives.\n\n### isOutputType\n\n```js\nfunction isOutputType(type: ?GraphQLType): boolean\n```\n\nThese types may be used as output types as the result of fields\n\n### isLeafType\n\n```js\nfunction isLeafType(type: ?GraphQLType): boolean\n```\n\nThese types may describe types which may be leaf values\n\n### isCompositeType\n\n```js\nfunction isCompositeType(type: ?GraphQLType): boolean\n```\n\nThese types may describe the parent context of a selection set\n\n### isAbstractType\n\n```js\nfunction isAbstractType(type: ?GraphQLType): boolean\n```\n\nThese types may describe a combination of object types\n\n## Un-modifiers\n\n### getNullableType\n\n```js\nfunction getNullableType(type: ?GraphQLType): ?GraphQLNullableType\n```\n\nIf a given type is non-nullable, this strips the non-nullability and\nreturns the underlying type.\n\n### getNamedType\n\n```js\nfunction getNamedType(type: ?GraphQLType): ?GraphQLNamedType\n```\n\nIf a given type is non-nullable or a list, this repeated strips the\nnon-nullability and list wrappers and returns the underlying type.\n\n## Scalars\n\n### GraphQLInt\n\n```js\nvar GraphQLInt: GraphQLScalarType;\n```\n\nA `GraphQLScalarType` that represents an int.\n\n### GraphQLFloat\n\n```js\nvar GraphQLFloat: GraphQLScalarType;\n```\n\nA `GraphQLScalarType` that represents a float.\n\n### GraphQLString\n\n```js\nvar GraphQLString: GraphQLScalarType;\n```\n\nA `GraphQLScalarType` that represents a string.\n\n### GraphQLBoolean\n\n```js\nvar GraphQLBoolean: GraphQLScalarType;\n```\n\nA `GraphQLScalarType` that represents a boolean.\n\n### GraphQLID\n\n```js\nvar GraphQLID: GraphQLScalarType;\n```\n\nA `GraphQLScalarType` that represents an ID.\n"},"nextDoc":{"frontmatter":{"title":"graphql/utilities","permalink":"/graphql-js/utilities/"}}},"pageContext":{"permalink":"/graphql-js/type/","nextPermalink":"/graphql-js/utilities/","sideBarData":[{"name":"GraphQL.js Tutorial","links":[{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-GettingStarted.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Getting Started With GraphQL.js","permalink":"/graphql-js/","next":"/graphql-js/running-an-express-graphql-server/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":"Getting Started","date":null,"tags":null},"id":"5438d58b-982e-5844-b28e-cb66d8c4e993"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Running an Express GraphQL Server","permalink":"/graphql-js/running-an-express-graphql-server/","next":"/graphql-js/graphql-clients/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":"Running Express + GraphQL","date":null,"tags":null},"id":"ed62cf84-8dcb-5a92-b5f9-4328c2bf4cac"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-GraphQLClients.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL Clients","permalink":"/graphql-js/graphql-clients/","next":"/graphql-js/basic-types/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"25adb02f-44bb-563e-b82e-c9ac0b47b140"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-BasicTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Basic Types","permalink":"/graphql-js/basic-types/","next":"/graphql-js/passing-arguments/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"067d30a9-2895-584b-82d4-2f461f333b6a"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-PassingArguments.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Passing Arguments","permalink":"/graphql-js/passing-arguments/","next":"/graphql-js/object-types/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"bc1b699a-83c5-5ae9-8032-4ae2950f897c"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-ObjectTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Object Types","permalink":"/graphql-js/object-types/","next":"/graphql-js/mutations-and-input-types/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"748468bd-5832-55ea-8585-c2156a85819f"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-Mutations.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Mutations and Input Types","permalink":"/graphql-js/mutations-and-input-types/","next":"/graphql-js/authentication-and-express-middleware/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"bd407c7c-cfed-5fed-899c-4e581ac840bb"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Tutorial-Authentication.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Authentication and Express Middleware","permalink":"/graphql-js/authentication-and-express-middleware/","next":"/graphql-js/constructing-types/","category":"GraphQL.js Tutorial","sublinks":null,"sidebarTitle":"Authentication & Middleware","date":null,"tags":null},"id":"4c0ab815-0aa1-52d6-8fbd-c9490526b321"}]},{"name":"Advanced Guides","links":[{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/Guides-ConstructingTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"Constructing Types","permalink":"/graphql-js/constructing-types/","next":"/graphql-js/express-graphql/","category":"Advanced Guides","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"e77e08e7-36e7-57cf-a824-2d1422915c37"}]},{"name":"API Reference","links":[{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"express-graphql","permalink":"/graphql-js/express-graphql/","next":"/graphql-js/graphql/","category":"API Reference","sublinks":"graphqlHTTP","sidebarTitle":null,"date":null,"tags":null},"id":"e0090c94-f27a-5d28-835c-4648cde911aa"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-GraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql","permalink":"/graphql-js/graphql/","next":"/graphql-js/error/","category":"API Reference","sublinks":"graphql","sidebarTitle":null,"date":null,"tags":null},"id":"58f2f91f-cca8-57fd-8db4-4680736c410e"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-Errors.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/error","permalink":"/graphql-js/error/","next":"/graphql-js/execution/","category":"API Reference","sublinks":"formatError,GraphQLError,locatedError,syntaxError","sidebarTitle":null,"date":null,"tags":null},"id":"9619fb38-c60a-57c5-ad41-a654af6b7ec5"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-Execution.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/execution","permalink":"/graphql-js/execution/","next":"/graphql-js/language/","category":"API Reference","sublinks":"execute","sidebarTitle":null,"date":null,"tags":null},"id":"f17b64f6-62ac-5827-ad1b-f44e29175eb0"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-Language.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/language","permalink":"/graphql-js/language/","next":"/graphql-js/type/","category":"API Reference","sublinks":"BREAK,getLocation,Kind,lex,parse,parseValue,printSource,visit","sidebarTitle":null,"date":null,"tags":null},"id":"415b55e0-0096-5624-b79a-b422b4d7ad07"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-TypeSystem.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/type","permalink":"/graphql-js/type/","next":"/graphql-js/utilities/","category":"API Reference","sublinks":"getNamedType,getNullableType,GraphQLBoolean,GraphQLEnumType,GraphQLFloat,GraphQLID,GraphQLInputObjectType,GraphQLInt,GraphQLInterfaceType,GraphQLList,GraphQLNonNull,GraphQLObjectType,GraphQLScalarType,GraphQLSchema,GraphQLString,GraphQLUnionType,isAbstractType,isCompositeType,isInputType,isLeafType,isOutputType","sidebarTitle":null,"date":null,"tags":null},"id":"f84564ec-97de-5575-82bf-a463dda7aaeb"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-Utilities.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/utilities","permalink":"/graphql-js/utilities/","next":"/graphql-js/validation/","category":"API Reference","sublinks":"astFromValue,buildASTSchema,buildClientSchema,buildSchema,introspectionQuery,isValidJSValue,isValidLiteralValue,printIntrospectionSchema,printSchema,typeFromAST,TypeInfo","sidebarTitle":null,"date":null,"tags":null},"id":"fa055e3a-e2f6-573b-b853-aeb3d2523b43"},{"fileAbsolutePath":"/Users/ks.choi/graphql.github.io/src/content/graphql-js/APIReference-Validation.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/validation","permalink":"/graphql-js/validation/","next":null,"category":"API Reference","sublinks":"specifiedRules,validate","sidebarTitle":null,"date":null,"tags":null},"id":"dd7fe377-a8d5-53b9-bd80-e605981d32f0"}]}],"sourcePath":"src/content/graphql-js/APIReference-TypeSystem.md"}},
    "staticQueryHashes": ["1581580458","2616045547"]}