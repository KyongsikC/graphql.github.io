{"version":3,"file":"component---src-pages-index-tsx-dd0092c994cadeeafe02.js","mappings":"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","sources":["webpack:///./src/Containers/Sections/Hero/index.tsx","webpack:///./src/Containers/Sections/SingleRequest/index.tsx","webpack:///./src/Containers/Sections/TypeSystem/index.tsx","webpack:///./src/Containers/Sections/PredictableResults/index.tsx","webpack:///./src/Containers/Sections/BringYourOwnCode/index.tsx","webpack:///./src/Containers/Sections/WithoutVersion/index.tsx","webpack:///./src/Containers/Sections/PowerFulTools/index.tsx","webpack:///./src/Containers/Sections/WhosUsing/index.tsx","webpack:///./src/pages/index.tsx"],"sourcesContent":["import { Link } from \"gatsby\"\nimport React from \"react\"\nimport HeaderLinks from \"../../../components/HeaderLinks\"\nimport Logo from \"../../../components/Logo\"\nimport Search from \"../../../components/Search\"\nimport Prism from \"../../../components/Prism\"\n\nconst Hero = () => {\n  return (\n    <div className=\"hero\">\n      <div className=\"abs\">\n        <header aria-hidden>\n          <section>\n            <HeaderLinks />\n            <Search searchID=\"hero-search-input\" />\n          </section>\n        </header>\n        <section className=\"intro\">\n          <div className=\"named-logo\">\n            <Logo />\n            <h1>GraphQL</h1>\n          </div>\n\n          <div className=\"marketing-col\">\n            <h3>Describe your data</h3>\n            <Prism\n              code={`type Project {\n  name: String\n  tagline: String\n  contributors: [User]\n}`}\n              language={\"graphql\"}\n            />\n          </div>\n\n          <div className=\"marketing-col\">\n            <h3>Ask for what you want</h3>\n            <Prism\n              code={`{\n  project(name: \"GraphQL\") {\n    tagline\n  }\n}`}\n              language={\"graphql\"}\n            />\n          </div>\n\n          <div className=\"marketing-col\">\n            <h3>Get predictable results</h3>\n            <Prism\n              code={`{\n  \"project\": {\n    \"tagline\": \"A query language for APIs\"\n  }\n}`}\n              language={\"json\"}\n            />\n          </div>\n        </section>\n\n        <div className=\"buttons-unit\">\n          <Link className=\"button\" to=\"/code/\">\n            Get Started\n          </Link>\n          <Link className=\"button\" to=\"/learn/\">\n            Learn More\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Hero\n","import React from 'react';\nimport Prism from '../../../components/Prism';\n\nconst SingleRequest = () => {\n    return (\n        <div className=\"grayWash\">\n        <section className=\"point2\" id=\"single-request\">\n          <div className=\"prose\">\n            <h2>\n              Get many resources\n              <br />\n              in a single request\n            </h2>\n            {/*Illustration: a query 2 or 3 levels deep]*/}\n            <p>\n              GraphQL queries access not just the properties of one resource but\n              also smoothly follow references between them. While typical REST\n              APIs require loading from multiple URLs, GraphQL APIs get all the\n              data your app needs in a single request. Apps using GraphQL can be\n              quick even on slow mobile network&nbsp;connections.\n            </p>\n          </div>\n          <div className=\"app-to-server\" aria-hidden>\n            <img\n              src=\"/img/phone.svg\"\n              width=\"496\"\n              height=\"440\"\n              className=\"phone\"\n            />\n            <div className=\"query\">\n              <Prism code={\n`{\n    hero {\n    name\n    friends {\n        name\n        }\n    }\n}`} language=\"graphql\" />\n            </div>\n            <div className=\"response\">\n            <Prism code={\n`{\n    \"hero\": {\n      \"name\": \"Luke Skywalker\",\n      \"friends\": [\n        { \"name\": \"Obi-Wan Kenobi\" },\n        { \"name\": \"R2-D2\" },\n        { \"name\": \"Han Solo\" },\n        { \"name\": \"Leia Organa\" }\n      ]\n    }\n}`} language=\"json\" />\n            </div>\n            <img\n              src=\"/img/server.svg\"\n              width=\"496\"\n              height=\"440\"\n              className=\"server\"\n            />\n          </div>\n        </section>\n      </div>\n    );\n};\n\nexport default SingleRequest;","import React, { useEffect } from \"react\"\nimport Prism from \"../../../components/Prism\"\n\nconst TypeSysyem = () => {\n  useEffect(() => {\n    const typeHighlight = document.getElementById(\"type-highlight\")\n    const queryHighlight = document.getElementById(\"query-highlight\")\n    let line = 0\n    const typeLines = [2, 6, 7, 6, 8, 13, 14, 9, 18, 19, 20, 13]\n    const queryLines = [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14]\n    let timer: any\n\n    const highlightLine = () => {\n      typeHighlight!.style.top = 17 * typeLines[line] - 9 + \"px\"\n      queryHighlight!.style.top = 17 * queryLines[line] - 9 + \"px\"\n      line = (line + 1) % typeLines.length\n      timer = setTimeout(highlightLine, 800 + Math.random() * 200)\n    }\n    highlightLine()\n    return () => clearTimeout(timer)\n  }, [])\n  return (\n    <section className=\"point3\" id=\"type-system\">\n      <div className=\"prose\">\n        <h2>\n          Describe what&rsquo;s possible\n          <br />\n          with a type system\n        </h2>\n        {/*Illustration of a type IDL following a query by line]*/}\n        {/*Under: a server <-> client (Capabilities, Requirements)]?*/}\n        <p>\n          GraphQL APIs are organized in terms of types and fields, not\n          endpoints. Access the full capabilities of your data from a single\n          endpoint. GraphQL uses types to ensure Apps only ask for what&rsquo;s\n          possible and provide clear and helpful errors. Apps can use types to\n          avoid writing manual parsing&nbsp;code.\n        </p>\n      </div>\n      <div className=\"window strong-typed-query\" aria-hidden>\n        <div className=\"query\">\n          <div id=\"query-highlight\" className=\"highlight\" />\n          <Prism\n            language=\"graphql\"\n            code={\n`{\n  hero {\n    name\n    friends {\n      name\n      homeWorld {\n        name\n        climate\n      }\n      species {\n        name\n        lifespan\n        origin {\n          name\n        }\n      }\n    }\n  }\n}`}\n          />\n        </div>\n        <div className=\"type-system\">\n          <div id=\"type-highlight\" className=\"highlight\" />\n          <Prism\n            language=\"graphql\"\n            code={\n`type Query {\n  hero: Character\n}\n\ntype Character {\n  name: String\n  friends: [Character]\n  homeWorld: Planet\n  species: Species\n}\n\ntype Planet {\n  name: String\n  climate: String\n}\n\ntype Species {\n  name: String\n  lifespan: Int\n  origin: Planet\n}`}\n          />\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default TypeSysyem\n","import React, { useEffect } from \"react\"\nimport Prism from \"../../../components/Prism\"\n\nconst PredictableResults = () => {\n  useEffect(() => {\n    const showResponse = (num: Number) => {\n      document.getElementById(\"r1\")!.style.display =\n        num === 1 ? \"block\" : \"none\"\n      document.getElementById(\"r2\")!.style.display =\n        num === 2 ? \"block\" : \"none\"\n      document.getElementById(\"r3\")!.style.display =\n        num === 3 ? \"block\" : \"none\"\n    }\n    let i = 0\n    let forward = true\n    let timer: any\n    timer = setTimeout(type, 2000)\n    showResponse(1)\n    function type() {\n      if (forward) {\n        if (document.getElementById(\"ch\" + i)) {\n          document.getElementById(\"ch\" + i)!.style.display = \"inline\"\n          i++\n          if (i === 20) {\n            forward = false\n            showResponse(3)\n            timer = setTimeout(type, 1500)\n          } else if (i === 11) {\n            showResponse(2)\n            timer = setTimeout(type, 1500)\n          } else {\n            timer = setTimeout(type, Math.random() * 180 + 70)\n          }\n        }\n      } else {\n        i--\n        if (document.getElementById(\"ch\" + i)) {\n          document.getElementById(\"ch\" + i)!.style.display = \"none\"\n          if (i === 0) {\n            forward = true\n            showResponse(1)\n            timer = setTimeout(type, 2000)\n          } else {\n            timer = setTimeout(type, 80)\n          }\n        }\n      }\n    }\n    return () => clearTimeout(timer)\n  }, [])\n  return (\n    <section className=\"point1\" id=\"predictable-results\">\n      <div className=\"prose\">\n        <h2>\n          Ask for what you need,\n          <br />\n          get exactly that\n        </h2>\n        {/*[Illustration: just a simple query and response?]*/}\n        <p>\n          Send a GraphQL query to your API and get exactly what you need,\n          nothing more and nothing less. GraphQL queries always return\n          predictable results. Apps using GraphQL are fast and stable because\n          they control the data they get, not the&nbsp;server.\n        </p>\n      </div>\n      <div className=\"window faux-graphiql\" aria-hidden>\n        <div className=\"query\">\n          <pre className=\"prism\">\n            {\"{\"}\n            {\"\\n  hero {\"}\n            {\"\\n    name\"}\n            {\"\\n    height\\n    mass\".split(\"\").map((c, i) => (\n              <span key={i} id={\"ch\" + i} className=\"ch\">\n                {c === \"\\n\" ? <br /> : c}\n              </span>\n            ))}\n            <span className=\"cursor\" />\n            {\"\\n  }\"}\n            {\"\\n}\"}\n          </pre>\n        </div>\n        <div className=\"response\">\n          <div id=\"r1\">\n            <Prism\n              language=\"json\"\n              code={\n`{\n  \"hero\": {\n      \"name\": \"Luke Skywalker\"\n  }\n}`}\n            />\n          </div>\n          <div id=\"r2\">\n            <Prism\n              language=\"json\"\n              code={\n`{\n  \"hero\": {\n      \"name\": \"Luke Skywalker\",\n      \"height\": 1.72\n  }\n}`}\n            />\n          </div>\n          <div id=\"r3\">\n            <Prism\n              language=\"json\"\n              code={\n`{\n  \"hero\": {\n      \"name\": \"Luke Skywalker\",\n      \"height\": 1.72,\n      \"mass\": 77\n  }\n}`}\n            />\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default PredictableResults\n","import React, { useEffect } from \"react\"\nimport Prism from \"../../../components/Prism\"\n\nconst Index = (): JSX.Element => {\n\n  useEffect(() => {\n    let i = 0\n    var inView = document.getElementById(\"leverageCodeView\")\n    var delayBefore = [800, 1800, 1200, 3000, 3000, 3000]\n    let timer: any\n    function step() {\n      inView!.className = \"step\" + i\n      i = (i + 1) % 6\n      timer = setTimeout(step, delayBefore[i])\n    }\n    step()\n    return () => clearTimeout(timer)\n  },[])\n\n  return (\n    <section className=\"point6\" id=\"bring-your-own-code\">\n      <div className=\"prose\">\n        <h2>\n          Bring your own\n          <br />\n          data and code\n        </h2>\n        {/*Illustration of each field becoming a function?]*/}\n        <p>\n          GraphQL creates a uniform API across your entire application without\n          being limited by a specific storage engine. Write GraphQL APIs that\n          leverage your existing data and code with GraphQL engines available in\n          many languages. You provide functions for each field in the type\n          system, and GraphQL calls them with optimal&nbsp;concurrency.\n        </p>\n      </div>\n      <div className=\"window leverage-code\" aria-hidden>\n        <div id=\"leverageCodeView\">\n          <Prism\n            language=\"graphql\"\n            code={\n`type Character {\n    name: String\n    homeWorld: Planet\n    friends: [Character]\n}`}\n          />\n          <Prism\n            language=\"javascript\"\n            code={\n`// type Character {\nclass Character {\n    // name: String\n    getName() {\n        return this._name\n    }\n    \n    // homeWorld: Planet\n    getHomeWorld() {\n        return fetchHomeworld(this._homeworldID)\n    }\n    \n    // friends: [Character]\n    getFriends() {\n        return this._friendIDs.map(fetchCharacter)\n    }\n}`}\n          />\n          <Prism\n            language=\"javascript\"\n            code={\n`# type Character {\nclass Character:\n    # name: String\n    def name(self):\n        return self._name\n\n    # homeWorld: Planet\n    def homeWorld(self):\n        return fetchHomeworld(self._homeworldID)\n\n    # friends: [Character]\n    def friends(self):\n        return map(fetchCharacter, self._friendIDs)\n`}\n          />\n          <Prism\n            language=\"javascript\"\n            code={`\n// type Character {\npublic class Character {\n  // name: String\n  public String Name { get; }\n\n  // homeWorld: Planet\n  public async Task<Planet> GetHomeWorldAsync() {\n    return await FetchHomeworldAsync(_HomeworldID);\n  }\n\n  // friends: [Character]\n  public async IEnumerable<Task<Character>> GetFriendsAsync() {\n    return _FriendIDs.Select(FetchCharacterAsync);\n  }\n}`}\n          />\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Index\n","import React, { useEffect } from \"react\"\nimport Prism from \"../../../components/Prism\"\n\nconst WithoutVersion = () => {\n  useEffect(() => {\n    let i = 0\n    let inView = document.getElementById(\"typeEvolveView\")\n    inView!.className = \"step\" + i\n    const interval = setInterval(function () {\n      i = (i + 1) % 7\n      inView!.className = \"step\" + i\n    }, 2200)\n    return () => clearInterval(interval)\n  })\n  return (\n    <div className=\"grayWash\">\n      <section className=\"point5\" id=\"without-versions\">\n        <div className=\"prose\">\n          <h2>\n            Evolve your API\n            <br />\n            without versions\n          </h2>\n          {/*Illustration showing more legs added to a graph? Or a type evolving over time?]*/}\n          <p>\n            Add new fields and types to your GraphQL API without impacting\n            existing queries. Aging fields can be deprecated and hidden from\n            tools. By using a single evolving version, GraphQL APIs give apps\n            continuous access to new features and encourage cleaner, more\n            maintainable server&nbsp;code.\n          </p>\n        </div>\n        <div className=\"window type-evolution\" aria-hidden>\n          <div id=\"typeEvolveView\">\n            <div className=\"v1\">\n              <Prism\n                language=\"graphql\"\n                code={\n`type Film {\n  title: String\n  episode: Int\n  releaseDate: String\n\n\n\n}`}\n              />\n            </div>\n            <div className=\"v2\">\n              <div className=\"add\" />\n              <Prism\n                language=\"graphql\"\n                code={\n`type Film {\n  title: String\n  episode: Int\n  releaseDate: String\n  openingCrawl: String\n\n\n}`}\n              />\n            </div>\n            <div className=\"v3\">\n              <div className=\"add\" />\n              <Prism\n                language=\"graphql\"\n                code={\n`type Film {\n  title: String\n  episode: Int\n  releaseDate: String\n  openingCrawl: String\n  director: String\n  \n}`}\n              />\n            </div>\n            <div className=\"v4\">\n              <div className=\"add\" />\n              <div className=\"add\" />\n              <div className=\"add\" />\n              <div className=\"add\" />\n              <div className=\"add\" />\n              <div className=\"add\" />\n              <div className=\"remove\" />\n              <Prism\n                language=\"graphql\"\n                code={\n`type Film {\n  title: String\n  episode: Int\n  releaseDate: String\n  openingCrawl: String\n  director: String\n  directedBy: Person\n}\n\ntype Person {\n  name: String\n  directed: [Film]\n  actedIn: [Film]\n}`}\n              />\n            </div>\n            <div className=\"v5\">\n              <div className=\"add\" />\n              <Prism\n                language=\"graphql\"\n                code={\n`type Film {\n  title: String\n  episode: Int\n  releaseDate: String\n  openingCrawl: String\n  director: String @deprecated\n  directedBy: Person\n}\n\ntype Person {\n  name: String\n  directed: [Film]\n  actedIn: [Film]\n  \n}`}\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport default WithoutVersion\n","import React from \"react\"\n\nconst PowerFulTools = () => {\n  return (\n    <div className=\"darkWash\">\n      <section className=\"point4\" id=\"powerful-tools\">\n        <div className=\"prose\">\n          <h2>\n            Move faster with\n            <br />\n            powerful developer tools\n          </h2>\n          {/*Illustration of GraphiQL validation error and typeahead, animated?]*/}\n          <p>\n            Know exactly what data you can request from your API without leaving\n            your editor, highlight potential issues before sending a query, and\n            take advantage of improved code intelligence. GraphQL makes it easy\n            to build powerful tools like{\" \"}\n            <a\n              href=\"https://github.com/graphql/graphiql\"\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              Graph<em>i</em>QL\n            </a>{\" \"}\n            by leveraging your API&rsquo;s type system.\n          </p>\n        </div>\n        <div className=\"graphiqlVid\">\n          {\" \"}\n          <video autoPlay muted loop playsInline >\n            <source src=\"/img/graphiql.mp4?x\" type=\"video/mp4\" />\n          </video>\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport default PowerFulTools\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst WhosUsing = () => {\n  return (\n    <section className=\"powered-by\" id=\"whos-using\">\n      <div className=\"prose\">\n        <h2>Who&rsquo;s using GraphQL?</h2>\n        <p>\n          Facebook's mobile apps have been powered by GraphQL since 2012. A\n          GraphQL spec was open sourced in 2015 and is now available in many\n          environments and used by teams of all sizes.\n        </p>\n      </div>\n      <div className=\"logos\">\n        {/* Waiting for permission from some of the below */}\n        <a\n          href=\"https://www.facebook.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src=\"/users/logos/facebook.png\" title=\"Facebook\" />\n        </a>\n        {/** /}\n    <a href=\"https://twitter.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <img src=\"/users/logos/twitter.png\" title=\"Twitter\" className=\"round\" />\n    </a>\n    {/**/}\n        <a\n          href=\"https://docs.github.com/en/graphql\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src=\"/users/logos/github.png\" title=\"GitHub\" className=\"round\" />\n        </a>\n        <a\n          href=\"https://www.pinterest.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            src=\"/users/logos/pinterest.png\"\n            title=\"Pinterest\"\n            className=\"round\"\n          />\n        </a>\n        {/** /}\n    <a href=\"https://www.airbnb.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <img src=\"/users/logos/airbnb.png\" title=\"Airbnb\" className=\"round\" />\n    </a>\n    {/**/}\n        <a\n          href=\"https://www.intuit.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src=\"/users/logos/intuit.png\" title=\"Intuit\" />\n        </a>\n        <a\n          href=\"https://www.coursera.org/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src=\"/users/logos/coursera.png\" title=\"Coursera\" />\n        </a>\n        <a\n          href=\"https://www.shopify.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            src=\"/users/logos/shopify.png\"\n            title=\"Shopify\"\n            className=\"round\"\n          />\n        </a>\n      </div>\n\n      <Link to=\"/users\" className=\"button\">\n        More GraphQL Users\n      </Link>\n    </section>\n  )\n}\n\nexport default WhosUsing\n","import React from \"react\"\nimport type { PageProps } from \"gatsby\"\nimport Layout from \"../components/Layout\"\n\nimport Hero from \"../Containers/Sections/Hero\"\nimport SingleRequest from \"../Containers/Sections/SingleRequest\"\nimport TypeSystem from \"../Containers/Sections/TypeSystem\"\nimport PredictableResults from \"../Containers/Sections/PredictableResults\"\nimport BringYourOwnData from \"../Containers/Sections/BringYourOwnCode\"\nimport WithoutVersions from \"../Containers/Sections/WithoutVersion\"\nimport PowerFulTools from \"../Containers/Sections/PowerFulTools\"\nimport WhosUsing from \"../Containers/Sections/WhosUsing\"\n\nexport default ({ pageContext }: PageProps<object, GatsbyTypes.SitePageContext>) => {\n  return (\n    <Layout className={\"index\"} title=\"GraphQL | A query language for your API\" pageContext={pageContext}>\n      <Hero />\n      <section className=\"lead\">\n        <h1>A query language for your API</h1>\n        <p>\n          GraphQL is a query language for APIs and a runtime for fulfilling\n          those queries with your existing data. GraphQL provides a complete and\n          understandable description of the data in your API, gives clients the\n          power to ask for exactly what they need and nothing more, makes it\n          easier to evolve APIs over time, and enables powerful\n          developer&nbsp;tools.\n        </p>\n      </section>\n      <PredictableResults />\n      <SingleRequest />\n      <TypeSystem />\n      <PowerFulTools />\n      <WithoutVersions />\n      <BringYourOwnData />\n      <WhosUsing />\n    </Layout>\n  )\n  }\n"],"names":["className","HeaderLinks","Search","searchID","Logo","Prism","code","language","Link","to","id","src","width","height","useEffect","timer","typeHighlight","document","getElementById","queryHighlight","line","typeLines","queryLines","highlightLine","style","top","length","setTimeout","Math","random","clearTimeout","showResponse","num","display","i","forward","type","split","map","c","key","inView","delayBefore","step","interval","setInterval","clearInterval","href","target","rel","autoPlay","muted","loop","playsInline","title","pageContext","Layout","TypeSystem"],"sourceRoot":""}