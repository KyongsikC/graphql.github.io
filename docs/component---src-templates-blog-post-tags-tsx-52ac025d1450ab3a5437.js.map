{"version":3,"file":"component---src-templates-blog-post-tags-tsx-52ac025d1450ab3a5437.js","mappings":"gHA4CA,IAxByC,SAAC,GAAD,IACvCA,EADuC,EACvCA,KADuC,OAGvC,uBAAKC,UAAU,iBACb,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIH,EAAKI,UAAYJ,EAAKK,QAGlC,yBACG,IAAIC,KAAKN,EAAKO,MAAMC,qBADvB,OACiDR,EAAKS,QAAQC,KAAK,OAGnE,uBAAKT,UAAU,eACZD,EAAKW,KAAKC,KAAI,SAAAC,GAAG,OAChB,wBAAMC,IAAKD,EAAKZ,UAAU,OACxB,gBAAC,EAAAC,KAAD,CAAMC,GAAE,SAAWU,EAAX,KAAoBA,QAKlC,yBAAIb,EAAKe,OAAOC,Y,uDCkCpB,IAtE8B,WAC5B,IAAMC,GAAOC,EAAAA,EAAAA,gBAAc,cAoBrBP,EAAOM,EAAKE,YAAYC,MAAMR,KAAI,SAAAQ,GAAK,OAAIA,EAAMC,cACjDC,EAAcL,EAAKM,kBAAkBC,MAEzBC,GAAgBC,EAAAA,EAAAA,eAA1BC,SAER,OACE,uBAAK1B,UAAU,yBACb,uBAAKA,UAAU,8BACb,uCACA,qBAAG2B,IAAI,OAAOC,KAAK,sBAAsBC,KAAK,iBAA9C,QAIF,uBAAK7B,UAAU,+BACb,wCACA,0BACGU,EAAKC,KAAI,SAAAC,GACR,IAAMkB,EAAelB,EAAI,GAAGmB,cAAgBnB,EAAIoB,UAAU,GACpDN,EAAW,SAASd,EAAZ,IACd,OACE,sBAAIC,IAAKD,GACNc,IAAaF,EACZM,EAEA,gBAAC,EAAA7B,KAAD,CAAMC,GAAIwB,GAAWI,SAOjC,uBAAK9B,UAAU,iCACb,0CACA,0BACGqB,EAAYV,KAAI,SAAAZ,GAAI,OACnB,sBAAIc,IAAKd,EAAKkC,QACXlC,EAAKI,WAAaqB,EACjBzB,EAAKK,MAEL,gBAAC,EAAAH,KAAD,CAAMC,GAAIH,EAAKI,UAAYJ,EAAKK,gB,wECxBhD,UAlBiC,SAAC,GAA0B,IAAxBY,EAAwB,EAAxBA,KAC5BkB,EADoD,EAAlBC,YACTvB,IAC/B,OACE,gBAAC,IAAD,CAAQR,MAAK,SAAW8B,EAAX,aAAmCC,YAAa,IAC3D,+BACE,uBAAKnC,UAAU,wBACb,2BACGgB,EAAKE,YAAYK,MAAMZ,KAAI,SAAAZ,GAAI,OAC9B,gBAAC,IAAD,CAAiBc,IAAKd,EAAKqC,GAAIrC,KAAMA,QAGzC,gBAAC,IAAD","sources":["webpack:///./src/components/BlogPostPreview/index.tsx","webpack:///./src/components/BlogSidebar/index.tsx","webpack:///./src/templates/{BlogPost.tags}.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { graphql, Link } from \"gatsby\"\n\nexport const fragments = graphql`\n  fragment BlogPostPreview_post on BlogPost {\n    title\n    date\n    authors\n    tags\n    postPath: gatsbyPath(filePath: \"/blog/{BlogPost.postId}\")\n    remark {\n      excerpt\n    }\n  }\n`;\n\ninterface Props {\n  post: GatsbyTypes.BlogPostPreview_postFragment,\n}\n\nconst BlogPostPreview: React.FC<Props> = ({\n  post,\n}) => (\n  <div className=\"inner-content\">\n    <h1>\n      <Link to={post.postPath!}>{post.title}</Link>\n    </h1>\n\n    <p>\n      {new Date(post.date).toLocaleDateString()} by {post.authors.join(', ')}\n    </p>\n\n    <div className=\"tag-wrapper\">\n      {post.tags.map(tag => (\n        <span key={tag} className=\"tag\">\n          <Link to={`/tags/${tag}/`}>{tag}</Link>\n        </span>\n      ))}\n    </div>\n\n    <p>{post.remark.excerpt}</p>\n  </div>\n)\n\nexport default BlogPostPreview\n","import React from \"react\"\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\nimport { useLocation } from \"@reach/router\"\n\nconst BlogSidebar: React.FC = () => {\n  const data = useStaticQuery<GatsbyTypes.AllTagsStaticQuery>(graphql`\n    query AllTagsStatic {\n      allBlogPost {\n        group(field: tags) {\n          fieldValue\n        }\n      }\n      allRecentBlogPost: allBlogPost(\n        limit: 30,\n        sort: { fields: [date], order: DESC }\n      ) {\n        nodes {\n          title\n          postId\n          postPath: gatsbyPath(filePath: \"/blog/{BlogPost.postId}\")\n        }\n      }\n    }\n  `)\n\n  const tags = data.allBlogPost.group.map(group => group.fieldValue!)\n  const recentPosts = data.allRecentBlogPost.nodes\n\n  const { pathname: currentPath } = useLocation();\n\n  return (\n    <div className=\"nav-docs blog-sidebar\">\n      <div className=\"nav-docs-section subscribe\">\n        <h3>Subscribe</h3>\n        <a rel=\"home\" type=\"application/rss+xml\" href=\"/blog/rss.xml\">\n          RSS\n        </a>\n      </div>\n      <div className=\"nav-docs-section categories\">\n        <h3>Categories</h3>\n        <ul>\n          {tags.map(tag => {\n            const formattedTag = tag[0].toUpperCase() + tag.substring(1)\n            const pathname = `/tags/${tag}/`;\n            return (\n              <li key={tag}>\n                {pathname === currentPath ? (\n                  formattedTag\n                ) : (\n                  <Link to={pathname}>{formattedTag}</Link>\n                )}\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n      <div className=\"nav-docs-section recent-posts\">\n        <h3>Recent Posts</h3>\n        <ul>\n          {recentPosts.map(post => (\n            <li key={post.postId}>\n              {post.postPath === currentPath ? (\n                post.title\n              ) : (\n                <Link to={post.postPath!}>{post.title}</Link>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default BlogSidebar\n","import * as React from \"react\"\nimport type { PageProps } from \"gatsby\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/Layout\"\nimport BlogPostPreview from \"../components/BlogPostPreview\"\nimport BlogSidebar from \"../components/BlogSidebar\"\n\nexport const query = graphql`\n  query TagPage($tag: String!) {\n    allBlogPost(\n      filter: { tags: { in: [$tag] } }\n    ) {\n      nodes {\n        id\n        ...BlogPostPreview_post\n      }\n    }\n  }\n`\n\ntype Props = PageProps<GatsbyTypes.TagPageQuery, GatsbyTypes.SitePageContext>\n\nconst TagPage: React.FC<Props> = ({ data, pageContext }) => {\n  const currentTag = pageContext.tag!\n  return (\n    <Layout title={`Blog: ${currentTag} | GraphQL`} pageContext={{}}>\n      <section>\n        <div className=\"documentationContent\">\n          <div>\n            {data.allBlogPost.nodes.map(post => (\n              <BlogPostPreview key={post.id} post={post} />\n            ))}\n          </div>\n          <BlogSidebar />\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport default TagPage\n"],"names":["post","className","Link","to","postPath","title","Date","date","toLocaleDateString","authors","join","tags","map","tag","key","remark","excerpt","data","useStaticQuery","allBlogPost","group","fieldValue","recentPosts","allRecentBlogPost","nodes","currentPath","useLocation","pathname","rel","type","href","formattedTag","toUpperCase","substring","postId","currentTag","pageContext","id"],"sourceRoot":""}